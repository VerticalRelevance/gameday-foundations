description: 'terminate ec2 instances'
schemaVersion: '0.3'
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: "arn of the role that allows the automation to perform 
      actions on your behalf"
mainSteps:
  - name: getInstancesForDeletion
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: getInstance
      Script: |-
        def termInstance(events, context)
          import boto3

          ec2 = boto3.client('ec2')
         
          query = ec2.describe_instances(
            Filters = [
              {
                "Key" : 'purpose'
                "Values" : 'gameday-testing'
              }
            ]
          )

          if not query['Reservations']:
              return({'noInstancesFound' : 'None found' })
          else:
              ids = []
              response = query['Reservations']
              for instanceSets in response:
                  for instance in instanceSets
                      ids.append(instance['InstanceId'])
              return ids
    outputs:
      - Name: id
        Selector: $.Payload
        Type: StringMap
    nextStep: terminateInstances
  - name: terminateInstances
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: getInstance
      InputPayload:
        instances: ' {{ getInstancesForDeletion.ids }}'
      Script: |-          
          def terminateInstances(events, context)  
            import boto3

            ec2 = boto3.client('ec2')
            instances = events['instances']

            ec2.terminate_instances(
              InstanceIds= instances
            )
            
          
