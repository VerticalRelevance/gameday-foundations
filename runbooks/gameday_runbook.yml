description: 'Runs the stress memory command on all instances tagged for gameday'
schemaVersion: '0.3'
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: "arn of the role that allows the automation to perform 
      actions on your behalf"
mainSteps:
  - name: getInstancesForStress
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: getInstancesForStress
      Script: |-
        def getInstancesForStress(events, context):
          import boto3

          ec2 = boto3.client('ec2')
         
          query = ec2.describe_instances(
            Filters = [
              {
                "Key" : "purpose",
                "Values" : "gameday-testing"
              }
            ]
          )

          if not query['Reservations']:
              return({'noInstancesFound' : 'None found' })
          else:
              ids = []
              response = query['Reservations']
              for instanceSets in response:
                  for instance in instanceSets:
                      ids.append(instance['InstanceId'])
              return ids
    outputs:
      - Name: ids
        Selector: $.Payload
        Type: StringMap
    nextStep: terminateInstances
  - name: terminateInstances
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: stressMemory
      InputPayload:
        instances: ' {{ getInstancesForStress.ids }}'
      Script: |-          
          def stressMemory(events, context):  
            import boto3

            ssm = boto3.client('ssm')
            instances = events['instances']
            ssm.send_command(
              InstanceIds = instance
              DocumentName = "StressMemory"
            )
            
          
